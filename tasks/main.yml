---
# tasks file for ansible-role-cfssl

- name: "Include {{ ansible_os_family }}.yml"
  include_vars: "{{ ansible_os_family }}.yml"


- name: Do workaround ansible issues 19084
  # See https://github.com/ansible/ansible/issues/19084
  set_fact: {"{{ item.key }}": "{{ item.value }}"}
  with_dict: "{{ cfssl_vars }}"
  when: cfssl_vars is defined


- name: "Include install-{{ ansible_os_family }}.yml"
  include: "install-{{ ansible_os_family }}.yml"

- name: Create cfssl_ca_root_dir directory
  file:
    path: "{{ cfssl_ca_root_dir }}"
    mode: 0755
    owner: "{{ cfssl_user }}"
    group: "{{ cfssl_group }}"
    state: directory

- name: Create cfssl_certs_dir
  file:
    path: "{{ cfssl_certs_dir }}"
    mode: 0755
    owner: "{{ cfssl_user }}"
    group: "{{ cfssl_group }}"
    state: directory

- name: Create ca.csr.json
  template:
    src: ca.csr.json.j2
    dest: "{{ cfssl_ca_csr_file }}"
    mode: "0644"
    # validate: echo %s
  notify:
    - Restart cfssl

- name: Create certificate for CA
  shell:
    cmd: "cfssl genkey -initca {{ cfssl_ca_csr_file }} | cfssljson -bare ca"
    chdir: "{{ cfssl_ca_root_dir }}"
    creates: "{{ cfssl_ca_root_dir }}/ca-key.pem"
  become: yes
  become_user: "{{ cfssl_user }}"
  notify:
    - Restart cfssl

- name: Ensure cfssl group can read CA root private key
  file:
    path: "{{ cfssl_ca_root_dir }}/ca-key.pem"
    mode: "0640"
    group: "{{ cfssl_group }}"
  notify:
    - Restart cfssl

- name: Create cfssl_ca_config_file
  template:
    src: ca-config.json.j2
    dest: "{{ cfssl_ca_config_file }}"
    mode: "0644"
  notify:
    - Restart cfssl

- name: See if cfssl_db_sqlite_database_file exists (sqlite)
  ansible.builtin.stat:
    path: "{{ cfssl_db_sqlite_database_file }}"
  register: __stat_cfssl_sqlite_database_file
  when:
    - cfssl_db_type == 'sqlite'

- name: Create database (sqlite)
  include_tasks: create-db-sqlite.yml
  when:
    - cfssl_db_type == 'sqlite'
    - not __stat_cfssl_sqlite_database_file.stat or not __stat_cfssl_sqlite_database_file.stat.exists

- name: Create json file for certs
  template:
    src: cert.json.j2
    dest: "{{ cfssl_certs_dir }}/{{ item['name'] }}"
    mode: "0644"
  with_items: "{{ cfssl_certs }}"

- name: Create certs
  shell:
  args:
    chdir: "{{ cfssl_certs_dir }}"
    cmd: "cfssl gencert -config={{ cfssl_ca_config_file | quote }} -profile={{ item['profile'] | quote }} -ca={{ cfssl_ca_root_dir + '/ca.pem' | quote }} -ca-key={{ cfssl_ca_root_dir + '/ca-key.pem' | quote }} -hostname={{ item['SAN'] | default(omit) | join(',') | quote }} {{ cfssl_certs_dir + '/' + item['name'] | quote }} | cfssljson -bare {{ item['json']['CN'] | regex_replace(' ', '_') | quote }}"
    creates: "{{ item['json']['CN'] | regex_replace(' ', '_') }}-key.pem"
  with_items: "{{ cfssl_certs }}"
  become: yes
  become_user: "{{ cfssl_user }}"

- name: Ensure private key is owned by owner
  file:
    path: "{{ cfssl_certs_dir }}/{{ item['json']['CN'] | regex_replace(' ', '_') }}-key.pem"
    mode: "0660"
    owner: "{{ item['owner'] | default(cfssl_user) }}"
    group: "{{ cfssl_group }}"
  with_items: "{{ cfssl_certs }}"

- name: Start cfssl_service when cfssl_db_type is not empty
  ansible.builtin.service:
    name: "{{ cfssl_service }}"
    state: started
  when:
    - cfssl_db_type | length > 0
